#Database config
ro.db.host=127.0.0.1
ro.db.database=testdb
ro.db.username=root
ro.db.password=root
ro.db.entity.package=com.rico.security.entity

#Log config
# ro.logging.appPackages can contain multiple package names with separate log levels for each package
ro.logging.appPackages={"com.rico.rest": "DEBUG"}
ro.logging.writeTo=CONSOLE
ro.logging.rootLogger=true
ro.logging.rootLogger.logLevel=INFO

#Security and UAA config
#security access rules is defined for urls with Role names without ROLE_ prefix
ro.security.rules={"/person/**":"ADMIN,MANAGER", "/welcome/**":"ADMIN", "/admin/**":"ADMIN"}
ro.security.defaultTargets={"ADMIN":"/welcome"}
ro.security.loginPage=/oauth_login
ro.uaa.client.registrationId=ricoapp1
ro.uaa.client.name=Rico2
ro.uaa.client.id=ricoapp1
ro.uaa.client.secret=ricoappsecret1
ro.uaa.host.url=http://localhost:8081/uaa/
ro.uaa.redirect.uri=/login/oauth2/code/uaa
ro.uaa.client.scopes=ADMIN,MANAGER,email,openid,profile

#configure UAA authorization server using the following commands by uaac -ruby cli client
#Get admin access
#uaac token client get admin -s adminsecret
#Add client, modify host part of redirect url pointing back to service as needed
#uaac client add ricoapp1 -s ricoappsecret1 --name Rico2 --scope ADMIN,MANAGER,openid,profile,email,address,phone --authorized_grant_types authorization_code,refresh_token,client_credentials,password --authorities uaa.resource --redirect_uri  http://localhost:8080/login/oauth2/code/uaa
#Add user to UAA
#uaac user add julien -p longliveking --emails kingjulien@disney.com
#Add user roles at UAA
#uaac group add ADMIN
#Assign roles to users at UAA
#uaac member add ADMIN
